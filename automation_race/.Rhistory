load(url("https://raw.githubusercontent.com/GarciaRios/govt_3990/gh-pages/Labs/lab4/data/ames.RData"))
n <- 60
samp <- sample_n(ames, n)
ggplot(samp, aes(x = Lot.Area)) + geom_histogram(binwidth = 1)
ggplot(samp, aes(x = Lot.Area)) + geom_histogram(binwidth = 100)
ggplot(samp, aes(x = Lot.Area)) + geom_histogram(binwidth = 1000)
ggplot(samp, aes(x = Lot.Area)) + geom_histogram(binwidth = 500)
ggplot(samp, aes(x = Lot.Area)) + geom_histogram(binwidth = 600)
ggplot(samp, aes(y = Lot.Area)) + geom_boxplot()
ggplot(samp, aes(x = 1, y = Lot.Area)) + geom_boxplot()
ggplot(samp, aes(x = Lot.Area)) + geom_histogram(binwidth = 500)
ggplot(samp, aes(x = 1, y = Lot.Area)) + geom_boxplot()
load(url("https://raw.githubusercontent.com/GarciaRios/govt_3990/gh-pages/Labs/lab4/data/ames.RData"))
n <- 60
samp <- sample_n(ames, n)
samp %>% select(1:7) %>%
slice(1:15)
set.seed(3990)
load(url("https://raw.githubusercontent.com/GarciaRios/govt_3990/gh-pages/Labs/lab4/data/ames.RData"))
n <- 60
samp <- sample_n(ames, n)
samp %>% select(1:7) %>%
slice(1:15)
ggplot(samp, aes(x = Lot.Area)) + geom_histogram(binwidth = 500)
ggplot(samp, aes(x = 1, y = Lot.Area)) + geom_boxplot()
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(Lot.Area) - z_star_95 * (sd(Lot.Area) / sqrt(n)),
upper = mean(Lot.Area) + z_star_95 * (sd(Lot.Area) / sqrt(n)))
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(Lot.Area) - z_star_95 * (sd(Lot.Area) / sqrt(n)),
upper = mean(Lot.Area) + z_star_95 * (sd(Lot.Area) / sqrt(n)))
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(Lot.Area) - z_star_95 * (sd(Lot.Area) / sqrt(n)),
mean = mean(Lot.Area),
upper = mean(Lot.Area) + z_star_95 * (sd(Lot.Area) / sqrt(n)))
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(Lot.Area) - z_star_95 * (sd(Lot.Area) / sqrt(n)),
mean = mean(Lot.Area),
upper = mean(Lot.Area) + z_star_95 * (sd(Lot.Area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(Lot.Area))
params <- ames %>%
summarise(mu = mean(Lot.Area))
params
ci <- do(50) * ames %>%
sample_n(n) %>%
summarise(lower = mean(Lot.Area) - z_star_95 * (sd(Lot.Area) / sqrt(n)),
upper = mean(Lot.Area) + z_star_95 * (sd(Lot.Area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci <- do(50) * ames %>%
sample_n(n) %>%
summarise(lower = mean(Lot.Area) - z_star_95 * (sd(Lot.Area) / sqrt(n)),
upper = mean(Lot.Area) + z_star_95 * (sd(Lot.Area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ci <- do(50) * ames %>%
sample_n(n) %>%
summarise(lower = mean(Lot.Area) - z_star_95 * (sd(Lot.Area) / sqrt(n)),
upper = mean(Lot.Area) + z_star_95 * (sd(Lot.Area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
7/50
43/50
z_star_95 <- qnorm(0.95)
z_star_95
# Choosing a 90% confidence interval:
z_star_90 <- qnorm(0.95)
z_star_90 #Display the critical value
n <- 100
sampoyo <- sample_n(ames,n)
sampoyo %>% select(1:7) %>%
slice(1:15)
sampoyo %>%
summarise(lower = mean(Lot.Area) - z_star_90 * (sd(Lot.Area) / sqrt(n)),
upper = mean(Lot.Area) + z_star_90 * (sd(Lot.Area) / sqrt(n)))
n <- 100
sampoyo <- sample_n(ames,n)
sampoyo %>% select(1:7) %>%
slice(1:15)
sampoyo %>%
summarise(lower = mean(Lot.Area) - z_star_90 * (sd(Lot.Area) / sqrt(n)),
mean = mean(Lot.Area),
upper = mean(Lot.Area) + z_star_90 * (sd(Lot.Area) / sqrt(n)))
n <- 100
sampoyo <- sample_n(ames,n)
sampoyo %>% select(1:7) %>%
slice(1:15)
sampoyo %>%
summarise(lower = mean(Lot.Area) - z_star_90 * (sd(Lot.Area) / sqrt(n)),
mean = mean(Lot.Area),
upper = mean(Lot.Area) + z_star_90 * (sd(Lot.Area) / sqrt(n)))
ci <- do(50) * ames %>%
sample_n(n) %>%
summarise(lower = mean(Lot.Area) - z_star_90 * (sd(Lot.Area) / sqrt(n)),
upper = mean(Lot.Area) + z_star_90 * (sd(Lot.Area) / sqrt(n)))
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
42/50 #Proportion of intervals that include the true population mean
samData = read.csv("RepSamJohnson_facebook_statuses.csv")
tiff('test.tiff', units="in", width=20, height=20, res=300)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
library(dplyr)
library(ggplot2)
library(stringr)
library(gdata)
library(readr)
tx3_sexage <- read_csv("tx3_sexage.csv")
ggplot(tx3_sexage[2:3,], aes(x = Title, y = Proportion, fill = Title)) + geom_col() + labs(title = "Gender in TX-03", x = "Gender", y = "Proportion") + theme(legend.position="none")
tx3_sexage <- read_csv("tx3_sexage.csv")
#Turn your 'treatment' column into a character vector
tx3_sexage$Title <- as.character(tx3_sexage$Title)
#Then turn it back into an ordered factor
tx3_sexage$Title <- factor(tx3_sexage$Title, levels=unique(tx3_sexage$Title))
ggplot(tx3_sexage[4:16, ], aes(x = Title, y = Proportion, fill = Title)) + geom_col() + labs(title = "Age in TX-03", x = "Age Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1))
ggplot(tx3_sexage[20:22, ], aes(x = Title, y = Proportion, fill = Title)) + geom_col() + labs(title = "Age in TX-03", x = "Age Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1))
tx3_race <- read_csv("tx3_race.csv")
ggplot(tx3_race[2:8,], aes(x = Title, y = Proportion, fill = Title)) + geom_col() + labs(title = "Race in TX-03", x = "Race", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
tx3_income <- read_csv("tx3_income.csv")
#Turn your 'treatment' column into a character vector
tx3_income$Title <- as.character(tx3_income$Title)
#Then turn it back into an ordered factor
tx3_income$Title <- factor(tx3_income$Title, levels=unique(tx3_income$Title))
tiff('test.tiff', units="in", width=20, height=20, res=300)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
tx3_insured <- read_csv("tx3_insured.csv")
#Turn your 'treatment' column into a character vector
tx3_insured$Title <- as.character(tx3_insured$Title)
#Then turn it back into an ordered factor
tx3_insured$Title <- factor(tx3_insured$Title, levels=unique(tx3_insured$Title))
ggplot(tx3_insured[c(2,5),], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Insurance Coverage in TX-03", x = "Insurance Coverage", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
tx3_insured$Title <- factor(tx3_insured$Title, levels=unique(tx3_insured$Title))
ggplot(tx3_insured[3:5,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Insurance Coverage Type in TX-03", x = "Insurance Coverage", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
tx3_occupation <- read_csv("tx3_occupation.csv")
ggplot(tx3_occupation[2:6,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Occupational Distribution in TX-03", x = "Occupation", y = "Proportion of Employed Civilians Aged 16+") + theme(legend.position="none") + scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
tx3_industry <- read_csv("tx3_industry.csv")
ggplot(tx3_industry[2:14,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Industry Employment Distribution in TX-03", x = "Industry", y = "Proportion of Employed Civilians Aged 16+") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1)) + scale_x_discrete(labels = function(x) str_wrap(x, width = 30))
tx3_education <- read_csv("tx3_education.csv")
#Turn your 'treatment' column into a character vector
tx3_education$Title <- as.character(tx3_education$Title)
#Then turn it back into an ordered factor
tx3_education$Title <- factor(tx3_education$Title, levels=unique(tx3_education$Title))
ggplot(tx3_education[2:8,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Education in TX-03", x = "Highest Level of Education", y = "Proportion of Adults Aged 25+") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
tiff('test.tiff', units="in", width=30, height=20, res=300)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
tiff('test.tiff', units="in", width=3, height=2, res=300)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
tiff('test.tiff', units="in", width=15, height=10, res=300)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
tiff('test.tiff', units="in", width=10, height=8, res=300)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
tiff('test.tiff', units="in", width=10, height=8, res=500)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
tiff('test.tiff', units="in", width=8, height=7, res=500)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 7,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1))
tiff('test.tiff')
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
tiff('test.tiff', units="in", width=7, height=4, res=500)
ggplot(tx3_income[2:11,], aes(x = Title, y = Relevant.Proportion, fill = Title)) + geom_col() + labs(title = "Incomes in TX-03", x = "Income Group", y = "Proportion") + theme(legend.position="none", axis.text.x =
element_text(size  = 10,
angle = 45,
hjust = 1,
vjust = 1))
dev.off()
library(dplyr)
library(ggplot2)
library(stringr)
library(gdata)
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
library(gdata)
library(readr)
margins <- read_csv("margins.csv")
View(margins)
View(margins)
margins <- read_csv("margins.csv")
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_point()
margins <- read_csv("margins.csv")
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line()
margins <- read_csv("margins.csv")
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1))
margins <- read_csv("margins.csv")
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin")
tiff('margins.tiff', units="in", width=7, height=4, res=500)
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin")
div.off()
tiff('margins.tiff', units="in", width=7, height=4, res=500)
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin")
dev.off()
View(margins)
margins <- read_csv("margins.csv")
tiff('margins.tiff', units="in", width=7, height=4, res=500)
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin") + theme(legend.title = NULL)
dev.off()
margins <- read_csv("margins.csv")
tiff('margins.tiff', units="in", width=7, height=4, res=500)
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin") +
theme(legend.title = "Type")
margins <- read_csv("margins.csv")
tiff('margins.tiff', units="in", width=7, height=4, res=500)
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin")+guides(fill=guide_legend(title=NULL))
dev.off()
margins <- read_csv("margins.csv")
tiff('margins.tiff', units="in", width=7, height=4, res=500)
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin")+theme(legend.title=element_blank())
dev.off()
margins <- read_csv("margins.csv")
tiff('margins.tiff', units="in", width=7, height=4, res=500)
ggplot(margins, aes(x = year, y = margin, color = type)) + geom_line() + scale_x_continuous(breaks = round(seq(1990, 2016, by = 2),1)) + labs(title = "Sam Johnson (TX-03) Margins of Victory", x = "Election Year", y = "Margin")+theme(legend.title=element_blank())
dev.off()
tx3_insured <- read_csv("tx3_insured.csv")
View(tx3_insured)
View(tx3_insured)
# DO NOT ALTER CODE IN THIS CHUNK
library(dplyr)
library(ggplot2)
library(ggmosaic)
load(url("http://www.openintro.org/stat/data/evals.RData"))
ggplot(data = evals, aes(x=score)) + geom_histogram()
# Ethnicity and professor rank
ggplot(evals, aes(x=rank, fill = ethnicity)) + geom_bar(position = "dodge")
# ggplot(evals, aes(x=rank, fill = ethnicity)) + geom_bar()
ggplot(evals) + geom_mosaic(aes(x = product(ethnicity, rank), fill = ethnicity))
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter()
m_bty <- lm(evals$score ~ evals$bty_avg)
plot(evals$score ~ evals$bty_avg)
abline(m_bty)
summary(m_bty)
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
qplot(data = evals, x = bty_avg, y = score, geom = "jitter") +
geom_smooth(method = "lm", se = FALSE)
predict(m_bty, evals)
ggplot(evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
ggplot(evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
install.packages("ggally")
install.packages("GGally")
library(GGally)
ggplot(evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
# DO NOT ALTER CODE IN THIS CHUNK
library(dplyr)
library(ggplot2)
library(ggmosaic)
library(GGally)
load(url("http://www.openintro.org/stat/data/evals.RData"))
ggplot(data = evals, aes(x=score)) + geom_histogram()
# Ethnicity and professor rank
ggplot(evals, aes(x=rank, fill = ethnicity)) + geom_bar(position = "dodge")
# ggplot(evals, aes(x=rank, fill = ethnicity)) + geom_bar()
ggplot(evals) + geom_mosaic(aes(x = product(ethnicity, rank), fill = ethnicity))
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter()
m_bty <- lm(evals$score ~ evals$bty_avg)
plot(evals$score ~ evals$bty_avg)
abline(m_bty)
summary(m_bty)
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
qplot(data = evals, x = bty_avg, y = score, geom = "jitter") +
geom_smooth(method = "lm", se = FALSE)
predict(m_bty, evals)
ggplot(evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
summary(m_bty_gen)
multiLines(m_bty_gen)
predict(m_bty, evals)
summary(m_bty_gen)
multiLines(m_bty_gen)
m_bty_rank = lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
m_bty_rank = lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
multiLines(m_bty_rank)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
temp <- summary(m_full)
coefficients
summary(fit)$coefficients[,4] #from stack overflow: http://stackoverflow.com/questions/5587676/pull-out-p-values-and-r-squared-from-a-linear-regression
summary(m_full)$coefficients[,4] #from stack overflow: http://stackoverflow.com/questions/5587676/pull-out-p-values-and-r-squared-from-a-linear-regression
temp <- summary(m_full)$coefficients[,4] #from stack overflow: http://stackoverflow.com/questions/5587676/pull-out-p-values-and-r-squared-from-a-linear-regression
temp
summary(m_full)
qplot(temp)
qplot(temp, binwidth = 1)
qplot(temp, binwidth = 15
)
qplot(temp)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_no_profs <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_no_profs)
m_no_profs <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval  + cls_credits + bty_avg + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity + gender + age + cls_perc_eval  + cls_credits + bty_avg + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity + gender + cls_perc_eval  + cls_credits + bty_avg + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity + gender + cls_perc_eval  + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity + cls_perc_eval  + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ ethnicity  + cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ cls_credits + bty_avg, data = evals)
summary(m_full)
m_full <- lm(score ~ cls_credits, data = evals)
summary(m_full)
m_full <- lm(score ~ cls_credits, data = evals)
summary(m_full)
multiline(m_full)
m_full <- lm(score ~ cls_credits, data = evals)
summary(m_full)
multilines(m_full)
m_full <- lm(score ~ cls_credits, data = evals)
summary(m_full)
multiLines(m_full)
m_full <- lm(score ~ cls_credits, data = evals)
summary(m_full)
qplot(data = evals, x = cls_credits, y = score, geom = "jitter")
m_final <- lm(score ~ cls_credits, data = evals)
summary(m_final)
multiLines(m_final)
plot(m_final)
plot_ss(x = cls_credits, y = score, data = evals)
ggplot(data=evals, aes(y= score)) + geom_point()
multiLines(m_bty_gen)
plot(evals)
plot(data=evals, x=cls_credits, y=score)
plot(m_final)
qplot(data = evals, x = cls_credits, y = score, geom = "jitter")
m_final <- lm(score ~ cls_credits + bty_avg, data = evals)
summary(m_final)
multiLines(m_final)
m_final <- lm(score ~ bty_avg + cls_credits, data = evals)
summary(m_final)
multiLines(m_final)
3.82245 + 0.07296*8 + 0.51333*1
3.82245 + 0.07296*1 + 0.51333*0
source('~/Desktop/pegahmoradi.github.io/automation_race/Analysis.R', echo=TRUE)
setwd("~/Desktop/pegahmoradi.github.io/automation_race")
source('~/Desktop/pegahmoradi.github.io/automation_race/Analysis.R', echo=TRUE)
View(data_gend_counts)
